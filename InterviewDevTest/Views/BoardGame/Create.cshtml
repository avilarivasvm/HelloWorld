@model InterviewDevTest.Models.BoardGame

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>BoardGame</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.NameGame, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameGame, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameGame, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FromAge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FromAge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FromAge, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImageAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnCreate" value="Create" class="btn btn-default" onclick="create()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}



<div id="qunit"></div>
<div id="qunit-fixture"></div>
<script src="//code.jquery.com/qunit/qunit-1.14.0.js"></script>
<script src="~/Test/QUnitJs.js"></script>
<script type="text/javascript">
    function create() {
        var error = "";
        var boardGame = new createObj();
        error = validate(boardGame);
        if (error == "") {
            $.ajax({
                type: "POST",
                data: JSON.stringify(boardGame),
                url: "http://localhost:12081/api/boardGame/addBoardGame",
                contentType: "application/json",
                success: function () {
                    window.location.href = "http://localhost:10482/";
                }
            });
        }
        else {
            alert(error);
        }
    }

    function createObj() {
        var boardGame = new Object();
        boardGame.nameGame = $("#NameGame").val()
        boardGame.brand = $("#Brand").val();
        boardGame.fromAge = $("#FromAge").val();
        boardGame.imageAddress = $("#ImageAddress").val();
        return boardGame;
    }

    function validate(boardGame) {
        var error = "";
        if (boardGame.nameGame == "") {
            error += "Must type a name ";
        }
        if (boardGame.brand == "") {
            error += "Must type a brand ";
        }
        if (boardGame.fromAge == "") {
            error += "Must type minimal age ";
        }
        if (boardGame.imageAddress == "") {
            error += "Must type image ";
        }
        return error;
    }

    QUnit.test('validate', function (assert) {
        var objTest = createObj();
        var errorTest = validate(objTest);
        assert.notEqual(errorTest, "");
        assert.equal(errorTest, "");
        assert.equal(objTest.nameGame.length, 0);
    });

</script>